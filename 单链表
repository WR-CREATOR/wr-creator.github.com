#include <stdio.h>
#include <stdlib.h>
//typedef 数据类型重命名
//typeedf <数据类型> <别名>
typedef struct Lnode {
	int data;
	struct Lnode *next;
}Lnode, *LinkList;
//Lnode *L 等同于 LinkList L

//按位查找 平均时间复杂度O(n)
Lnode *GetElem(LinkList L, int i) {
	if (i < 0) return false;
	int j = 0;
	Lnode *p = L;
	while (p != NULL&&j < i) {
		p = p->next;
		++j;
	}
	return p;
}

//按值查找(带头结点）
Lnode *LocateElem(LinkList L, int e) {
	if (L == NULL) return false;
	Lnode *p = p->next;
	while (p != NULL&&p->data != e) {
		p = p->next;
	}
	return p;
}

//求表的长度（带头结点）
int Length(LinkList L) {
	Lnode *p = L->next;
	int len;
	while (p != NULL) {
		p = p->next;
		++len;
	}
	return len;
}

//后插操作
bool InsertNextNode(LinkList &p, int e) {
	Lnode *temp = (Lnode*)malloc(sizeof(Lnode));
	if (temp == NULL) return false;
	temp->data = e;
	temp->next = p->next;
	p->next = temp;
	return true;
}

//前插操作
bool InsertPriorNode(LinkList &p, int e) {
	if (p = NULL) return false;
	Lnode *s = (Lnode*)malloc(sizeof(Lnode));
	if (s == NULL) return false;
	s->data = p->data;
	p->data = e;
	s->next = p->next;
	p->next = s;
	return true;
}

//按位序删除结点
//平均、最坏时间复杂度O(n) 最好时间复杂度O(1)
bool ListDelete_withhead(LinkList &L, int i, int &e) {
	if (L == NULL) return false;
	Lnode *p = L;
	int j = 0;
	while (p != NULL&&j < i - 1) {
		p = p->next;
		++j;
	}
	if (p == NULL || p->next == NULL) return false;//i的值不合法&&i-1结点后无结点
	Lnode *q = p->next;//目标：删除q结点
	e = q->data;
	p->next = q->next;
	free(q);
	return true;
}

bool ListDelete_withouthead(LinkList &L, int i, int &e) {
	if (L == NULL) return false;
	if (i == 1) {
		Lnode *q = L->next;
		e = L->data;
		L = q;
		L->next = q->next;
		free(q);
		return true;
	}
	Lnode *p = L;
	int j = 1;
	while (p != NULL&&j < i - 1) {
		p = p->next;
		++j;
	}
	if (p == NULL || p->next == NULL) return false;
	Lnode *q = p->next;
	e = q->data;
	p->next = q->next;
	free(q);
	return true;
}

//删除指定结点p,时间复杂度O(1)
//特殊情况:如果p是最后一个结点，只能从表头一次寻找p的前驱，时间复杂度O(n)
bool DeleteNode(Lnode *p) {
	if (p == NULL) return false;
	Lnode *q = p->next;
	p->data = q->data;
	p->next = q->next;
	free(q);
	return true;
}

//第i个位置插入e(带头结点）
bool ListInsert_withhead(LinkList &L, int i, int e) {
	if (i < 1) return false;
	Lnode *p = L;
	int j = 0;
	while (p != NULL&&j < i - 1) {
		p = p->next;
		++j;
	}
	/*if (p == NULL) return false;
	Lnode *temp = (Lnode*)malloc(sizeof(Lnode));
	temp->data = e;
	temp->next = p->next;
	p->next = temp;
	return true;*/
	return InsertNextNode(p, e);
}

bool ListInsert_withouthead(LinkList &L, int i, int e) {
	if (i < 1) return false;
	if (i = 1) {
		Lnode *temp = (Lnode *)malloc(sizeof(Lnode));
		temp->data = e;
		L->next = temp->next;
		L = temp;
	}
	Lnode *p = L;
	int j = 1;
	while (p != NULL&&j < i - 1) {
		p = p->next;
		++j;
	}
	/*if (p == NULL) return false;
	Lnode *temp = (Lnode*)malloc(sizeof(Lnode));
	temp->data = e;
	temp->next = p->next;
	p->next = temp;
	return true;*/
	return InsertNextNode(p, e);
}

bool InitList_withouthead(LinkList &L) {
	L = NULL;
	return true;
}

bool InitList_withhead(LinkList &L) {
	L = (Lnode*)malloc(sizeof(Lnode));
	if (L == NULL) return false;
	L->next = NULL;
	return true;
}

//尾插法（带头结点）
LinkList TailInsert(LinkList &L) {
	L = (Lnode*)malloc(sizeof(Lnode));
	Lnode *p, *r = L;
	int s;
	scanf("%d", &s);
	while (s != -1) {
		p = (Lnode*)malloc(sizeof(Lnode));
		p->data = s;
		r->next = p;
		r = p;
		scanf("%d", &s);
	}
	r->next = NULL;
	return L;
}

LinkList HeadInsert(LinkList &L) {
	Lnode *p;
	L = (Lnode*)malloc(sizeof(Lnode));
	L->next = NULL;
	int s;
	scanf("%d", &s);
	while (s != -1) {
		p = (Lnode*)malloc(sizeof(Lnode));
		p->data = s;
		p->next = L->next;
		L->next = p;
		scanf("%d", &s);
	}
	return L;
}

void Print(LinkList L) {
	Lnode *p = L->next;
	while (p != NULL) {
		printf("%d ", p->data);
		p = p->next;
	}
}

//尾插法（不带头结点）
void TailInsert_withouthead(LinkList &L) {
	int x;
	scanf("%d", &x);
	L = (Lnode*)malloc(sizeof(Lnode));
	L->data = x;
	Lnode *p = L;
	scanf("%d", &x);
	while (x != -1) {
		Lnode *q = (Lnode*)malloc(sizeof(Lnode));
		q->data = x;
		p->next = q;
		p = q;
		scanf("%d", &x);
	}
	p->next = NULL;
}

//头插法（不带头结点）
void HeadInsert_withouthead(LinkList &L) {
	int x;
	scanf("%d", &x);
	L = (Lnode*)malloc(sizeof(Lnode));
	L->data = x;
	L->next = NULL;
	scanf("%d", &x);
	while (x != -1) {
		Lnode *p = (Lnode*)malloc(sizeof(Lnode));
		p->data = x;
		p->next = L;
		L = p;
		scanf("%d", &x);
	}
}

void Print_withouthead(LinkList L) {
	Lnode *p = L;
	while (p != NULL) {
		printf("%d ", p->data);
		p = p->next;
	}
}

//链表的逆置
void InvertList(LinkList &L) {
	Lnode *p = L->next;
	if (p == NULL) return;
	Lnode *q = p->next;
	while (q != NULL) {
		p->next = q->next;
		q->next = L->next;
		L->next = q;
		q = p->next;
	}
}

void InsertList_withoutHead(LinkList &L) {
	Lnode *p = L;
	if (p == NULL) return;
	Lnode *q = p->next;
	while (q != NULL) {
		p->next = q->next;
		q->next = L;
		L = q;
		q = p->next;
	}
}

int main() {
	LinkList L;
	//HeadInsert_withouthead(L);
	//TailInsert(L);
	TailInsert_withouthead(L);
	//Print(L);
	//InvertList(L);
	InsertList_withoutHead(L);
	//Print(L);
	Print_withouthead(L);
	system("pause");
	return 0;
}
